üìä INFORME COMPLETO - M√ìDULO SISTEMA DE CAJA (POS)
Aplicativo Spoon - Terminal de Punto de Venta

üéØ RESUMEN EJECUTIVO
El M√≥dulo Sistema de Caja es un terminal de punto de venta (POS) completo integrado en el aplicativo Spoon. Permite gestionar sesiones de caja, procesar pagos de √≥rdenes (mesas y delivery), registrar gastos operativos, y mantener control financiero en tiempo real para restaurantes.
Funcionalidades Principales

‚úÖ Control de sesiones de caja (apertura/cierre con arqueo)
‚úÖ Procesamiento de pagos (efectivo, tarjeta, digital)
‚úÖ Gesti√≥n de gastos operativos (categorizados y auditados)
‚úÖ Dashboard financiero en tiempo real
‚úÖ Integraci√≥n completa con sistema de mesas y delivery


üìÅ ESTRUCTURA DE ARCHIVOS
1. Hooks Personalizados
packages/shared/caja/hooks/
‚îú‚îÄ‚îÄ useCajaSesion.ts        # Gesti√≥n de sesiones de caja
‚îú‚îÄ‚îÄ useCaja.ts              # Operaciones generales del POS  
‚îî‚îÄ‚îÄ useGastos.ts            # Gesti√≥n de gastos operativos
2. Componentes UI
apps/restaurant/src/components/caja/
‚îú‚îÄ‚îÄ CajaTerminal.tsx        # Componente principal del terminal
‚îú‚îÄ‚îÄ ControlesCaja.tsx       # Controles apertura/cierre caja
‚îú‚îÄ‚îÄ ModalProcesarPago.tsx   # Modal procesamiento pagos
‚îú‚îÄ‚îÄ ModalNuevoGasto.tsx     # Modal registro gastos
‚îî‚îÄ‚îÄ OrdenPendiente.tsx      # Display √≥rdenes por cobrar
3. Definiciones de Tipos
packages/shared/caja/types/
‚îî‚îÄ‚îÄ cajaTypes.ts            # Interfaces y tipos TypeScript
4. Constantes y Configuraci√≥n
packages/shared/caja/constants/
‚îî‚îÄ‚îÄ cajaConstants.ts        # Configuraci√≥n, mensajes, utilidades
5. Funciones de Base de Datos
packages/shared/lib/
‚îî‚îÄ‚îÄ supabase.ts             # Funciones CRUD y consultas BD

üîß AN√ÅLISIS DETALLADO POR ARCHIVO
1. useCajaSesion.ts - Hook de Gesti√≥n de Sesiones
Ubicaci√≥n: packages/shared/caja/hooks/useCajaSesion.ts
Variables de Estado:
typescriptconst [sesionActual, setSesionActual] = useState<CajaSesion | null>(null);
const [estadoCaja, setEstadoCaja] = useState<string>('cerrada');  
const [loading, setLoading] = useState(true);
const [error, setError] = useState<string | null>(null);
Funciones Principales:

verificarSesionAbierta() - Consulta BD para verificar sesi√≥n activa del restaurante
abrirCaja(montoInicial: number, notas?: string) - Crea nueva sesi√≥n en tabla caja_sesiones
cerrarCaja(notas?: string) - Actualiza sesi√≥n actual con estado 'cerrada' y timestamp

Prop√≥sito: Controlar el ciclo de vida de las sesiones de caja, garantizando que solo exista una sesi√≥n abierta por restaurante.

2. useCaja.ts - Hook Principal de Operaciones POS
Ubicaci√≥n: packages/shared/caja/hooks/useCaja.ts (paste.txt)
Variables de Estado:
typescriptconst [ordenesMesas, setOrdenesMesas] = useState<OrdenPendiente[]>([]);
const [ordenesDelivery, setOrdenesDelivery] = useState<OrdenPendiente[]>([]);
const [metricas, setMetricas] = useState<MetricasCaja>({
  balance: 0,           // Saldo actual de caja
  ventasTotales: 0,     // Total vendido en el d√≠a
  porCobrar: 0,         // Monto pendiente por cobrar
  gastosTotales: 0,     // Total de gastos del d√≠a
  transaccionesDelDia: [], // Array de transacciones
  totalEfectivo: 0,     // Total cobrado en efectivo
  totalTarjeta: 0,      // Total cobrado con tarjeta
  totalDigital: 0       // Total cobrado digital
});
Funciones Principales:

obtenerDatosCaja() - Consulta m√∫ltiples tablas para dashboard
procesarPago(orden, metodoPago, montoRecibido) - Registra transacci√≥n y actualiza orden
calcularCambio(montoTotal, montoRecibido) - Calcula vuelto para pagos en efectivo

Auto-refresh: Sistema que actualiza datos cada 30 segundos cuando caja est√° abierta
typescriptuseEffect(() => {
  if (estadoCaja === 'abierta') {
    const interval = setInterval(() => {
      obtenerDatosCaja();
    }, CAJA_CONFIG.REFRESH_INTERVAL); // 30000ms
  }
}, [estadoCaja]);

3. useGastos.ts - Hook de Gesti√≥n de Gastos
Ubicaci√≥n: packages/shared/caja/hooks/useGastos.ts (paste-2.txt)
Variables de Estado:
typescriptconst [gastos, setGastos] = useState<GastoCaja[]>([]);
const [totalGastos, setTotalGastos] = useState(0);
const [gastosPorCategoria, setGastosPorCategoria] = useState<{
  [key in CategoriaGasto]: number;
}>({
  proveedor: 0,    // Gastos en proveedores
  servicios: 0,    // Servicios p√∫blicos, etc.
  suministros: 0,  // Material de empaque, etc.
  otro: 0          // Gastos varios
});
Funciones Principales:

crearGasto(nuevoGasto: NuevoGasto) - Inserta registro en tabla gastos_caja
eliminarGasto(gastoId: string) - Soft delete de gasto
validarGasto(gasto: NuevoGasto) - Validaciones antes de crear
buscarGastos(termino: string) - B√∫squeda por concepto o categor√≠a


4. cajaConstants.ts - Configuraci√≥n y Constantes
Ubicaci√≥n: packages/shared/caja/constants/cajaConstants.ts (paste-3.txt)
Configuraciones Principales:
typescriptexport const CAJA_CONFIG = {
  MONTO_INICIAL_DEFAULT: 5000000,  // $50,000 pesos en centavos
  REFRESH_INTERVAL: 30000,         // 30 segundos
  DENOMINACIONES_EFECTIVO: [       // Billetes para c√°lculos
    { valor: 10000000, label: '$100,000' },
    { valor: 5000000, label: '$50,000' },
    // ... m√°s denominaciones
  ]
};
M√©todos de Pago:
typescriptexport const METODOS_PAGO: { value: MetodoPago; label: string; icon: string }[] = [
  { value: 'efectivo', label: 'Efectivo', icon: 'üíµ' },
  { value: 'tarjeta', label: 'Tarjeta', icon: 'üí≥' },
  { value: 'digital', label: 'Digital', icon: 'üì±' }
];
Categor√≠as de Gastos:
typescriptexport const CATEGORIAS_GASTOS: { value: CategoriaGasto; label: string; icon: string; color: string }[] = [
  { value: 'proveedor', label: 'Proveedor', icon: 'üè™', color: 'blue' },
  { value: 'servicios', label: 'Servicios', icon: '‚ö°', color: 'green' },
  { value: 'suministros', label: 'Suministros', icon: 'üì¶', color: 'orange' },
  { value: 'otro', label: 'Otro', icon: 'üíº', color: 'gray' }
];
Utilidades de Formato:

formatCurrency(centavos: number) - Formateador para pesos colombianos
parseCurrency(currency: string) - Parseador de moneda a centavos


5. CajaTerminal.tsx - Componente Principal
Ubicaci√≥n: apps/restaurant/src/components/caja/CajaTerminal.tsx (paste-7.txt)
Variables de Estado:
typescriptconst [tabActiva, setTabActiva] = useState<TabActiva>('movimientos');
const [subTabMovimientos, setSubTabMovimientos] = useState<SubTabMovimientos>('por_cobrar');
const [ordenSeleccionada, setOrdenSeleccionada] = useState<OrdenPendienteType | null>(null);
const [modalPagoAbierto, setModalPagoAbierto] = useState(false);
const [modalGastoAbierto, setModalGastoAbierto] = useState(false);
Secciones del Dashboard:

Header: Controles principales y botones de acci√≥n
M√©tricas: 4 cards con balance, ventas, por cobrar, gastos
Pesta√±as: Movimientos, Arqueo, Reportes
Sub-pesta√±as: Por cobrar, Ingresos, Egresos
Filtros: Fecha, b√∫squeda, actualizaci√≥n

Handlers Principales:

handleProcesarPago(orden) - Abre modal de pago
handleConfirmarPago(orden, metodoPago, montoRecibido) - Procesa transacci√≥n
handleNuevoGasto() - Abre modal de gastos


6. ModalProcesarPago.tsx - Modal de Procesamiento de Pagos
Ubicaci√≥n: apps/restaurant/src/components/caja/ModalProcesarPago.tsx (paste-5.txt)
Variables de Estado:
typescriptconst [metodoPago, setMetodoPago] = useState<MetodoPago>('efectivo');
const [montoRecibido, setMontoRecibido] = useState<number>(0);
const [cambioCalculado, setCambioCalculado] = useState<number>(0);
const [procesando, setProcesando] = useState(false);
const [pagoExitoso, setPagoExitoso] = useState<{ cambio: number } | null>(null);
Funcionalidades:

Selecci√≥n de m√©todo de pago (efectivo/tarjeta/digital)
C√°lculo autom√°tico de cambio para pagos en efectivo
Montos sugeridos basados en denominaciones comunes
Validaci√≥n de monto recibido vs monto total
Pantalla de confirmaci√≥n con detalles del cambio

Funci√≥n de Montos Sugeridos:
typescriptconst getMontosSugeridos = () => {
  const total = orden.monto_total;
  const denominaciones = [1000000, 500000, 200000, 100000, 50000, 20000, 10000];
  
  for (const denom of denominaciones) {
    const redondeado = Math.ceil(total / denom) * denom;
    if (redondeado > total && redondeado <= total * 1.5) {
      sugeridos.push(redondeado);
    }
  }
};

7. ModalNuevoGasto.tsx - Modal de Registro de Gastos
Ubicaci√≥n: apps/restaurant/src/components/caja/ModalNuevoGasto.tsx (paste-4.txt)
Variables de Estado:
typescriptconst [concepto, setConcepto] = useState('');
const [monto, setMonto] = useState<number>(0);
const [categoria, setCategoria] = useState<CategoriaGasto>('otro');
const [notas, setNotas] = useState('');
const [showConceptosSugeridos, setShowConceptosSugeridos] = useState(false);
Funcionalidades:

Selecci√≥n visual de categor√≠a con iconos y colores
Conceptos sugeridos por categor√≠a (definidos en constants)
Montos r√°pidos para selecci√≥n com√∫n ($5k, $10k, $20k, $50k)
Validaciones en tiempo real de formulario
Preview de monto en formato peso colombiano

Conceptos Frecuentes por Categor√≠a:
typescriptexport const CONCEPTOS_FRECUENTES = {
  proveedor: ['Compra de ingredientes', 'Carnes y prote√≠nas', '..'],
  servicios: ['Servicios p√∫blicos', 'Internet y telefon√≠a', '..'],
  suministros: ['Material de empaque', 'Productos de limpieza', '..'],
  otro: ['Gastos administrativos', 'Capacitaci√≥n personal', '..']
};

8. ControlesCaja.tsx - Controles de Sesi√≥n
Ubicaci√≥n: apps/restaurant/src/components/caja/ControlesCaja.tsx (paste-6.txt)
Estados Visuales:

Caja Abierta: Muestra sesi√≥n actual, monto inicial, hora apertura
Caja Cerrada: Bot√≥n para abrir nueva sesi√≥n

Funciones:

Modal de Apertura: Configuraci√≥n de monto inicial y notas
Modal de Cierre: Confirmaci√≥n y notas de cierre
Validaciones: Monto inicial positivo requerido


9. OrdenPendiente.tsx - Componente de √ìrdenes
Ubicaci√≥n: apps/restaurant/src/components/caja/OrdenPendiente.tsx (paste-8.txt)
Funcionalidades:

Display de informaci√≥n de orden (mesa/delivery)
C√°lculo de tiempo transcurrido desde creaci√≥n
Bot√≥n de cobrar integrado
Estados visuales diferenciados por tipo
Componente de lista vac√≠a cuando no hay √≥rdenes


10. Funciones de Base de Datos (supabase.ts)
Ubicaci√≥n: packages/shared/lib/supabase.ts (paste-9.txt)
Funciones de Sesiones:
typescript// Gesti√≥n de sesiones de caja
export const getSesionCajaActiva = async (restaurantId: string): Promise<CajaSesion | null>
export const abrirSesionCaja = async (restaurantId, cajeroId, montoInicial, notas): Promise<CajaSesion>
export const cerrarSesionCaja = async (sesionId: string, notas?: string): Promise<CajaSesion>
Funciones de Transacciones:
typescript// Procesamiento de pagos
export const procesarPagoOrden = async (sesionId, cajeroId, ordenId, tipoOrden, metodoPago, montoTotal, montoRecibido)
export const getTransaccionesDelDia = async (restaurantId: string, fecha?: string)
export const getTransaccionesSesion = async (sesionId: string): Promise<TransaccionCaja[]>
Funciones de Gastos:
typescript// Gesti√≥n de gastos operativos
export const crearGastoCaja = async (cajaSesionId, cajeroId, gastoData)
export const getGastosDelDia = async (restaurantId: string, fecha?: string)
export const eliminarGastoCaja = async (gastoId: string): Promise<void>
Funciones de √ìrdenes:
typescript// Consulta de √≥rdenes pendientes
export const getOrdenesMesasPendientes = async (restaurantId: string)
export const getOrdenesDeliveryPendientes = async (restaurantId: string)

üìä TIPOS E INTERFACES
Interfaces Principales (cajaTypes.ts):
typescript// Sesi√≥n de caja
export interface CajaSesion {
  id: string;
  restaurant_id: string;
  cajero_id: string;
  monto_inicial: number;        // En centavos
  estado: 'abierta' | 'cerrada';
  abierta_at: string;
  cerrada_at?: string;
  notas_apertura?: string;
  notas_cierre?: string;
}

// Transacci√≥n de pago
export interface TransaccionCaja {
  id: string;
  caja_sesion_id: string;
  orden_id: string;
  tipo_orden: 'mesa' | 'delivery' | 'directa';
  metodo_pago: 'efectivo' | 'tarjeta' | 'digital';
  monto_total: number;          // En centavos
  monto_recibido?: number;
  monto_cambio: number;
  procesada_at: string;
  cajero_id: string;
}

// Orden pendiente de pago
export interface OrdenPendiente {
  id: string;
  tipo: 'mesa' | 'delivery';
  identificador: string;        // "Mesa 5" o "Juan P√©rez"
  monto_total: number;
  fecha_creacion: string;
  detalles?: string;
}

// Gasto operativo
export interface GastoCaja {
  id: string;
  caja_sesion_id: string;
  concepto: string;
  monto: number;                // En centavos
  categoria: CategoriaGasto;
  comprobante_url?: string;
  registrado_por: string;
  registrado_at: string;
  notas?: string;
}

üóÉÔ∏è ESTRUCTURA DE BASE DE DATOS
Tablas Principales:
1. caja_sesiones - Control de Turnos
sqlid                uuid PRIMARY KEY
restaurant_id     uuid REFERENCES restaurants(id)
cajero_id         uuid REFERENCES users(id)
monto_inicial     integer NOT NULL          -- En centavos
estado            text CHECK (estado IN ('abierta', 'cerrada'))
abierta_at        timestamptz DEFAULT now()
cerrada_at        timestamptz
notas_apertura    text
notas_cierre      text
created_at        timestamptz DEFAULT now()
updated_at        timestamptz DEFAULT now()
2. transacciones_caja - Registro de Pagos
sqlid                uuid PRIMARY KEY
caja_sesion_id    uuid REFERENCES caja_sesiones(id)
orden_id          uuid NOT NULL             -- FK a ordenes_mesa o delivery_orders
tipo_orden        text CHECK (tipo_orden IN ('mesa', 'delivery', 'directa'))
metodo_pago       text CHECK (metodo_pago IN ('efectivo', 'tarjeta', 'digital'))
monto_total       integer NOT NULL          -- En centavos
monto_recibido    integer
monto_cambio      integer DEFAULT 0
procesada_at      timestamptz DEFAULT now()
cajero_id         uuid REFERENCES users(id)
3. gastos_caja - Control de Egresos
sqlid                uuid PRIMARY KEY
caja_sesion_id    uuid REFERENCES caja_sesiones(id)
concepto          text NOT NULL
monto             integer NOT NULL          -- En centavos
categoria         text CHECK (categoria IN ('proveedor', 'servicios', 'suministros', 'otro'))
comprobante_url   text
registrado_por    uuid REFERENCES users(id)
registrado_at     timestamptz DEFAULT now()
notas             text

üîÑ FLUJO DE OPERACI√ìN
1. Inicio de Jornada:

Cajero accede al terminal POS
Ejecuta abrirCaja() con monto inicial
Sistema crea registro en caja_sesiones
Estado cambia a 'abierta'
Dashboard se actualiza autom√°ticamente cada 30s

2. Procesamiento de Pago:

Sistema consulta √≥rdenes pendientes (mesas + delivery)
Cajero selecciona orden y m√©todo de pago
Si es efectivo, calcula cambio autom√°ticamente
Ejecuta procesarPago() que:

Crea registro en transacciones_caja
Actualiza orden como 'pagada'
Actualiza m√©tricas en tiempo real



3. Registro de Gastos:

Cajero accede a modal de gastos
Selecciona categor√≠a y concepto
Sistema valida y ejecuta crearGasto()
Actualiza totales de egresos
Impacta balance general

4. Cierre de Jornada:

Cajero ejecuta cerrarCaja()
Sistema actualiza registro con timestamp cierre
Estado cambia a 'cerrada'
Genera resumen final de la jornada


‚ö° CARACTER√çSTICAS T√âCNICAS
Optimizaciones de Rendimiento:

Auto-refresh inteligente solo cuando caja abierta
Consultas optimizadas con √≠ndices en BD
C√°lculos en tiempo real sin impacto en UX
Estados locales para respuesta inmediata

Validaciones y Seguridad:

Row Level Security (RLS) por restaurante
Validaciones multi-nivel (cliente, servidor, BD)
Sesi√≥n √∫nica por restaurante garantizada
Auditor√≠a completa de todas las operaciones

Integraci√≥n:

Sistema de mesas autom√°tico
√ìrdenes delivery integradas
Dashboard unificado con m√©tricas reales
Notificaciones en tiempo real


üìã ARCHIVOS FALTANTES NECESARIOS
Para completar el an√°lisis, ser√≠a √∫til tener:

cajaTypes.ts completo - Para verificar todas las interfaces
Componentes UI base (Button.tsx, Input.tsx, Card.tsx) - Para entender dependencias
Tests unitarios - Para documentar casos de uso
Archivo de configuraci√≥n de la aplicaci√≥n - Para constantes globales
Middleware de autenticaci√≥n - Para flujo de permisos


‚úÖ FORTALEZAS DEL M√ìDULO

‚úÖ Arquitectura s√≥lida - Separaci√≥n clara de responsabilidades
‚úÖ UX optimizada - Flujos intuitivos y validaciones en tiempo real
‚úÖ Seguridad robusta - RLS y validaciones multi-nivel
‚úÖ Escalabilidad - Preparado para m√∫ltiples restaurantes
‚úÖ Integraci√≥n completa - Conecta con todos los m√≥dulos
‚úÖ Auditor√≠a total - Trazabilidad de todas las operaciones
‚úÖ Flexibilidad - M√∫ltiples m√©todos de pago y categor√≠as


Este m√≥dulo representa una implementaci√≥n profesional y completa de un sistema POS, con todas las funcionalidades necesarias para la operaci√≥n diaria de un restaurante.