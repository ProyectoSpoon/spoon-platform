Análisis del Módulo: ConfiguracionPage (Dashboard)
1. Propósito del Módulo
Esta página permite gestionar la configuración del restaurante dentro del dashboard (App Router). Ofrece una interfaz por pestañas para editar datos básicos, ubicación, horarios, imágenes y (con permisos) gestión de usuarios y roles.

2. Funcionalidades Principales
Pestañas de configuración:
- Información General: nombre, descripción, teléfono, email, tipo de cocina
- Ubicación: dirección y datos geográficos (país, departamento, ciudad; lat/long opcionales)
- Horarios Comerciales: gestión por día con múltiples turnos y resumen semanal
- Imágenes: logo y portada (hoy con carga simulada)
- Usuarios y Roles: visible solo si el usuario tiene permiso 'config.usuarios'; incluye subpestañas Usuarios, Configuración de Roles y Auditoría, con estadísticas básicas

Aclaración sobre Onboarding:
- El “progreso de 4 pasos” y la acción de “marcar como finalizada” pertenecen al flujo de onboarding en `apps/web/src/app/config-restaurante/**`, no a esta página de dashboard.

Características de Horarios:
- Configuración independiente por día de la semana
- Hasta 3 turnos por día (apertura/cierre con selector en intervalos de 30 min)
- Copiar horarios entre días
- Vista de resumen semanal + editor detallado por día

3. Dependencias Identificadas
Externas:
- React (useState, useEffect, etc.)
- lucide-react (iconos)
- react-hot-toast (notificaciones)

Internas (críticas):
- `@spoon/shared/services/restaurant` (RestaurantService: getUserRestaurant, updateBasicInfo, updateLocation, updateImages, updateBusinessHours, markSetupComplete)
- `@spoon/shared/lib/supabase` (getUserRestaurant, updateRestaurant) — usado hoy en Horarios
- `@spoon/shared/hooks/usePermissions` para gating de pestañas de usuarios
- `@spoon/shared/services/usuarios` para usuarios, roles, permisos y estadísticas
- Interfaces: RestaurantData, UserData, BusinessHours

APIs de servicio usadas en la página o formularios:
- RestaurantService.getUserRestaurant()
- RestaurantService.updateBasicInfo()
- RestaurantService.updateLocation()
- RestaurantService.updateImages()  ← existe y se usa
- RestaurantService.updateBusinessHours()  ← disponible (recomendado unificar)
- getUserRestaurant(), updateRestaurant()  ← usados actualmente por HorariosForm

4. Hallazgos y Consistencias
- Servicios: existe una mezcla entre RestaurantService y llamadas directas a supabase (HorariosForm usa getUserRestaurant/updateRestaurant). Se recomienda unificar en RestaurantService.
- `updateImages` sí existe y está en uso por `ImagenesForm`. El TXT anterior dudaba de su existencia.
- Validación ausente o mínima: faltan reglas en formularios (emails/teléfonos; horarios: apertura < cierre y no solapados).
- Carga redundante: la página y Horarios cargan datos del restaurante por separado.
- Permisos: la pestaña “Usuarios y Roles” solo aparece si `usePermissions` concede `config.usuarios`.

5. Sugerencias de Mejora
Refactor estructural mínimo viable:
- Unificar acceso a datos en RestaurantService (mover HorariosForm a `updateBusinessHours` y pasar datos como props desde la página para evitar doble fetch).
- Extraer partes de la página (header/tabs/contenedores) para reducir complejidad.

Validación robusta:
- Formularios de Info General/Ubicación: requeridos, formato email/telefono
- Horarios: apertura < cierre; no solapar turnos; avisos por día sin turnos estando “abierto”

Upload real de imágenes:
- Integrar Supabase Storage / S3 / Cloudinary y persistir URLs definitivas con `updateImages`.

UX de persistencia:
- Advertir cambios no guardados al cambiar de pestaña o salir; opcionalmente “autosave” por campo/blur con debounce.

6. Observaciones para IAs Futuras
Contexto arquitectónico:
- Página de alto nivel del dashboard; no es el wizard de onboarding (ese vive en `config-restaurante`).
- Usa gating por permisos para mostrar la sección de usuarios y roles.

Patrones de diseño:
- Formularios controlados, tabs compuestos, lifting de estado hacia la página principal.

Integraciones críticas:
- Autenticación (perfil/restaurant id), base de datos (RLS), notificaciones.

Testing sugerido:
- Mock de servicios (RestaurantService/UsuariosService)
- Simulación de eventos en formularios y validaciones
- Cobertura de estados de loading/error y permisos

Limitaciones actuales:
- Sin autosave; posibles pérdidas de cambios si navega sin guardar
- Upload de imágenes simulado (no storage real)
- Doble fetch en Horarios y validaciones básicas pendientes

Conclusión:
El módulo de Configuración del dashboard está operativo para Info General, Ubicación, Horarios e Imágenes, y añade un área de Usuarios y Roles con permisos. Requiere unificación de servicios, validaciones más estrictas y un flujo de subida de imágenes real. El progreso de 4 pasos corresponde al onboarding separado y no debería documentarse aquí como parte de esta página.

7. Mapa técnico detallado (variables, funciones, contratos)

7.1 Página principal: `apps/web/src/app/dashboard/configuracion/page.tsx`
- Imports clave:
	- UI/Forms: `GeneralInfoForm`, `UbicacionForm`, `HorariosForm`, `ImagenesForm`, `Tabs`, `SinPermisos`.
	- Iconos: `Info`, `Clock`, `Upload`, `Users` (se castea a `any`: `InfoCast`, `ClockCast`, etc.).
	- Permisos: `usePermissions()` → `hasPermission`.
	- Notificaciones: `useNotifications()` → `addNotification`.
	- Usuarios (módulo): `EstadisticasUsuarios`, `UsuariosTab`, `ConfiguracionRolesTab`, `AuditoriaTab`, `UsuariosService`.

- State (useState):
	- Edición: `editGeneral`, `editUbicacion`, `editHorarios`, `editImagenes` (booleans para habilitar edición y mostrar botones Guardar/Cancelar en formularios).
	- Navegación: `activeTab` (string: 'info' | 'location' | 'horarios' | 'imagenes' | 'usuarios').
	- Carga/Guardado: `loading`, `savingGeneral`, `savingUbicacion`.
	- Usuarios (pestaña con permisos):
		- `activeUsersTab`: 'usuarios' | 'roles' | 'auditoria'.
		- `loadingUsers`: boolean.
		- `usuarios`: `UsuarioRestaurante[]`.
		- `roles`: `RoleSistema[]`.
		- `permisos`: `Record<string, PermisoSistema[]>`.
		- Control de idempotencia y reintentos: `hasLoadedUsuariosOnce` (useRef), `hasLoadedRolesPermisos` (useRef), `rolesPermisosAttempt` (contador), `hasWarnedRolesPermisos` (useRef), `hasAttemptedRolesFromUsuarios` (useRef).
		- `estadisticas`: `EstadisticasUsuariosStats` (counters por rol y total).
	- Datos del restaurante para formularios:
		- `generalInfo`: `{ name, description, phone, email, cuisineType }` (strings).
		- `ubicacion`: `{ address, country_id, department_id, city_id, latitude?, longitude? }`.

- Refs para deep-links/anchors: `anchorGeneralRef`, `anchorUbicacionRef`, `anchorHorariosRef`, `anchorImagenesRef`.

- Efectos y navegación:
	- Deep-link por hash al cargar y en `hashchange`: mapea `#general|#ubicacion|#horarios|#imagenes|#usuarios` → `activeTab` usando un `map`/`reverseMap` (y `history.replaceState` para actualizar hash al cambiar pestañas).
	- Scroll suave a anchor según hash con `scrollIntoView` tras pequeño delay.
	- Carga inicial de datos del restaurante: `import('@spoon/shared/services/restaurant')` → `RestaurantService.getUserRestaurant()`, setea `generalInfo` y `ubicacion` desde `data`.
	- Carga condicional de datos de usuarios (solo si `activeTab === 'usuarios'` y `hasPermission('config.usuarios')`): llama `loadUsuariosYEstadisticas()` una sola vez.
	- Carga de roles desde la subpestaña Usuarios si aún no se cargaron (para selects): `UsuariosService.getRolesSistema()` con `hasAttemptedRolesFromUsuarios` para evitar duplicados.
	- Carga de roles+permisos con reintentos en la subpestaña Roles: `UsuariosService.getRolesSistema()` y `UsuariosService.getPermisos()`, con backoff usando `rolesPermisosAttempt` y advertencias con `addNotification`.

- Funciones (handlers):
	- `onTabChange(id: string)`: set `activeTab` y sincroniza hash (reverseMap).
	- `handleGeneralChange(field, value)`: actualiza `generalInfo`.
	- `handleGeneralSubmit()`: `RestaurantService.updateBasicInfo({ name, description, contact_phone, contact_email, cuisine_type })` y notifica éxito/error.
	- `handleUbicacionChange(field, value)`: actualiza `ubicacion`.
	- `handleUbicacionSubmit()`: `RestaurantService.updateLocation({ address, country_id, department_id, city_id, latitude, longitude })` y notifica éxito/error.
	- `loadUsuariosYEstadisticas()`: `UsuariosService.getUsuariosRestaurante()` y `UsuariosService.getEstadisticas()`, setea `usuarios` y `estadisticas` o notifica error.
	- `refrescarUsuarios()`: vuelve a cargar usuarios+estadísticas (para after-save/after-invite).

- Tabs (estructura):
	- `tabItems`: `[ {id:'info', label:'Información General', icon}, {id:'location', label:'Ubicación', icon}, {id:'horarios', label:'Horarios', icon}, {id:'imagenes', label:'Imágenes', icon} ]`.
	- Condicional: si `hasPermission('config.usuarios')` añade `{ id:'usuarios', label: 'Usuarios y Roles (N activos)', icon }`.
	- Subpestañas en Usuarios: `[ {id:'usuarios'}, {id:'roles'}, {id:'auditoria'} ]`.

- Gating por permisos:
	- Si no tiene `config.usuarios`, muestra `SinPermisos` en la pestaña Usuarios con mensaje informativo.

7.2 Formulario de Horarios: `apps/web/src/app/dashboard/configuracion/HorariosForm.tsx`
- Tipos:
	- `Turno`: `{ horaApertura: string; horaCierre: string }`.
	- `HorarioDia`: `{ abierto: boolean; turnos: Turno[] }`.
	- `Horarios`: `{ lunes..domingo: HorarioDia }`.
	- `DiaSemana` = keyof `Horarios`.

- Constantes:
	- `DIAS_SEMANA`: `['lunes', 'martes', 'miercoles', 'jueves', 'viernes', 'sabado', 'domingo']`.
	- `NOMBRES_DIAS`: mapa a nombres humanizados.
	- `estadoInicial`: todos los días `abierto: false` con un turno por defecto `08:00-18:00`.
	- `opcionesHora`: generado por `generarOpcionesHora()` en intervalos cada 30 min, 06:00 a 23:30 (excluye 23:30).

- State:
	- `horarios: Horarios`, `diaSeleccionado: DiaSemana`, `guardando: boolean`, `cargando: boolean`, `restaurantId: string | null`.

- Efecto inicial:
	- Carga `restaurant` con `getUserRestaurant()` (desde `@spoon/shared/lib/supabase`) y si existe `business_hours` lo setea en `horarios`; guarda `restaurantId`.

- Funciones principales:
	- `formatTo12Hour(hh:mm)`: transforma a formato 12h con AM/PM.
	- `generarOpcionesHora()`: construye selects de tiempo.
	- `toggleDiaAbierto(dia, abierto)`.
	- `actualizarTurno(dia, index, cambios)`.
	- `agregarTurno(dia)`: máximo 3 por día.
	- `eliminarTurno(dia, index)`: mínimo 1 por día.
	- `copiarHorarios(origen, destino)`: duplica estado y muestra `toast.success`.
	- `tieneHorariosConfigurados()`: al menos un día abierto.
	- `guardarHorarios()`: valida `restaurantId`, llama `updateRestaurant(restaurantId, { business_hours: horarios })` (desde `@spoon/shared/lib/supabase`), y `toast` de éxito/error.

- Notas de diseño:
	- Este formulario usa actualmente funciones directas de supabase (getUserRestaurant/updateRestaurant). Recomendación: migrar a `RestaurantService.updateBusinessHours()` y recibir `business_hours` como prop para evitar doble fetch.
	- Validaciones pendientes: asegurar `horaApertura < horaCierre` y evitar solapamientos entre turnos.

7.3 Formulario de Imágenes: `apps/web/src/app/dashboard/configuracion/ImagenesForm.tsx`
- Tipos:
	- `ImageUrls`: `{ logo_url: string; cover_image_url: string }`.

- State y refs:
	- `imageUrls`, `saving`, `loading`.
	- `logoInputRef`, `coverInputRef` para invocar `<input type="file" />` ocultos.

- Efecto inicial:
	- `RestaurantService.getUserRestaurant()` → setea `logo_url` y `cover_image_url` desde `data`.

- Funciones:
	- `handleFileUpload(e, type)`: validación de tipo/tamaño (PNG/JPEG; 2MB logo, 5MB portada), simula upload con `FileReader` y setea DataURL; notifica.
	- `handleSave()`: `RestaurantService.updateImages(imageUrls)`; notifica éxito/error.

- Notas:
	- Upload es simulado: falta integrar storage (Supabase Storage/S3/Cloudinary) y persistir la URL final pública.

7.4 Módulo Usuarios y Roles (subsección de configuración)
- Componentes: `EstadisticasUsuarios`, `UsuariosTab`, `ConfiguracionRolesTab`, `AuditoriaTab`.
- Permisos: visible solo con `hasPermission('config.usuarios')`.
- State adicional (ver 7.1): `usuarios`, `roles`, `permisos`, `estadisticas`, flags de carga y control de reintentos.
- Servicios invocados:
	- `UsuariosService.getUsuariosRestaurante()` (lista usuarios del restaurante; usados para `UsuariosTab`).
	- `UsuariosService.getEstadisticas()` (totales por rol y activos).
	- `UsuariosService.getRolesSistema()` (roles del sistema; usados en subpestaña Usuarios y en Roles).
	- `UsuariosService.getPermisos()` (permisos por rol/área; usados en Roles).
- Lógica de reintentos:
	- En la subpestaña Roles, si falla la carga de roles o permisos, se notifica una sola vez y se reintenta con backoff controlado por `rolesPermisosAttempt` hasta éxito.

7.5 Servicios y contratos relevantes
- `packages/shared/services/restaurant.ts` (RestaurantService):
	- `getUserRestaurant(): Promise<{ data: RestaurantData|null, error: any }>`.
	- `getUserProfile(): Promise<{ data: UserData|null, error: any }>`.
	- `updateBasicInfo(updates)`: acepta `{ name, description, contact_phone, contact_email, cuisine_type }`.
	- `updateLocation(updates)`: `{ address, country_id, department_id, city_id, latitude?, longitude? }`.
	- `updateBusinessHours(business_hours: BusinessHours)`.
	- `updateImages(updates)`: `{ logo_url?, cover_image_url? }`.
	- `markSetupComplete()`.

- `packages/shared/lib/supabase.ts` (usado hoy por HorariosForm):
	- `getUserRestaurant(): Promise<Restaurant|null>`.
	- `updateRestaurant(restaurantId, updates)`.

- `packages/shared/services/usuarios.ts` (UsuariosService):
	- `getUsuariosRestaurante()`, `getEstadisticas()`, `getRolesSistema()`, `getPermisos()`.

- Contratos de datos usados en la página:
	- `RestaurantData` (campos usados): `name`, `description`, `contact_phone`, `contact_email`, `cuisine_type`, `address`, `country_id`, `department_id`, `city_id`, `latitude`, `longitude`, `logo_url`, `cover_image_url`, `business_hours`.
	- `BusinessHours`: objeto con llaves `lunes..domingo` y cada una `{ abierto: boolean, turnos: { horaApertura: string, horaCierre: string }[] }`.

7.6 Rutas relacionadas y separación de responsabilidades
- Esta página: `/dashboard/configuracion` (pestañas internas y deep-links por hash: `#general`, `#ubicacion`, `#horarios`, `#imagenes`, `#usuarios`).
- Onboarding (flujo 4 pasos) separado en:
	- `/config-restaurante/informacion-general`
	- `/config-restaurante/ubicacion`
	- `/config-restaurante/horario-comercial`
	- `/config-restaurante/logo-portada`
	- Página índice: `/config-restaurante` (muestra progreso y CTA de finalización)

7.7 Validaciones y edge cases pendientes
- Validaciones:
	- Info General/Ubicación: requeridos, formato email/teléfono coherente con reglas de negocio.
	- Horarios: `horaApertura < horaCierre`; prevenir solapes entre turnos; impedir “abierto” sin turnos válidos.
	- Imágenes: validar dimensiones si es necesario; limitar tipos/tamaño; manejar errores de upload real.
- UX:
	- Avisar cambios no guardados al cambiar de pestaña o abandonar la página.
	- Mostrar estados vacíos amigables (sin usuarios/roles/permiso denegado).
- Datos:
	- Manejar `getUserRestaurant()` devolviendo `null` (sin restaurante vinculado) con bloqueos o redirecciones.
