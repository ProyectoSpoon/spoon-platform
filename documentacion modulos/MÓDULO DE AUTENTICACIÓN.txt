INFORME DETALLADO - M√ìDULO DE AUTENTICACI√ìN

1. INFORMACI√ìN GENERAL DEL M√ìDULO
(AuthPage Component)
Tipo: Componente React de autenticaci√≥n
Framework: Next.js con TypeScript
Prop√≥sito: Gestionar el login y registro de usuarios restauranteros en la plataforma SPOON

2. AN√ÅLISIS DE IMPORTACIONES Y DEPENDENCIAS
2.1 Directivas del Framework
javascript'use client';

Prop√≥sito: Indica que este es un Client Component en Next.js 13+
Implicaci√≥n: Se ejecuta en el navegador, permite usar hooks y eventos

2.2 Hooks de React
javascriptimport { useState } from 'react';

useState: Hook para manejar estado local del componente
Uso: Gestiona m√∫ltiples estados (formularios, UI, errores, carga)

2.3 Iconos de Lucide React
javascriptimport { Eye, EyeOff, ArrowLeft, Loader2 } from 'lucide-react';

Eye/EyeOff: Iconos para mostrar/ocultar contrase√±as
ArrowLeft: √çcono de navegaci√≥n (importado pero no utilizado)
Loader2: √çcono de carga con animaci√≥n de spinning

2.4 Navegaci√≥n de Next.js
javascriptimport { useRouter } from 'next/navigation';

useRouter: Hook para navegaci√≥n program√°tica
Uso: Redirigir usuarios despu√©s de autenticaci√≥n exitosa

2.5 Sistema de Notificaciones
javascriptimport toast, { Toaster } from 'react-hot-toast';

toast: Funci√≥n para mostrar notificaciones emergentes
Toaster: Componente contenedor para renderizar las notificaciones

2.6 Componentes de Next.js
javascriptimport Link from 'next/link';

Link: Componente optimizado para navegaci√≥n entre p√°ginas

2.7 Funciones de la Capa de Servicios
javascriptimport { signInUser, signUpUser, getUserProfile, getUserRestaurant } from '@spoon/shared';

signInUser: Funci√≥n para autenticar usuarios existentes
signUpUser: Funci√≥n para registrar nuevos usuarios
getUserProfile: Obtiene datos del perfil del usuario
getUserRestaurant: Obtiene informaci√≥n del restaurante del usuario


3. AN√ÅLISIS DETALLADO DEL ESTADO DEL COMPONENTE
3.1 Estados de Control de UI
javascriptconst [modoRegistro, setModoRegistro] = useState(false);

Prop√≥sito: Alternar entre vista de login (false) y registro (true)
Tipo: boolean
Comportamiento: Cambia toda la interfaz del formulario

javascriptconst [cargando, setCargando] = useState(false);

Prop√≥sito: Indicar cuando se est√° procesando una petici√≥n
Uso: Deshabilita botones y muestra spinners durante operaciones async

javascriptconst [error, setError] = useState<string | null>(null);

Prop√≥sito: Almacenar mensajes de error para mostrar al usuario
Tipo: string nullable
Comportamiento: Se limpia autom√°ticamente al cambiar inputs

3.2 Estados de Visibilidad de Contrase√±as
javascriptconst [mostrarContrasena, setMostrarContrasena] = useState(false);
const [mostrarConfirmPassword, setMostrarConfirmPassword] = useState(false);

Prop√≥sito: Controlar la visibilidad de campos de contrase√±a
Comportamiento: Alternan entre type="password" y type="text"

3.3 Estados de Datos de Formularios
3.3.1 Datos de Login
javascriptconst [datosLogin, setDatosLogin] = useState({
  correo: '',
  contrasena: ''
});

Estructura: Objeto con campos m√≠nimos para autenticaci√≥n
Validaci√≥n: B√°sica (required en HTML)

3.3.2 Datos de Registro
javascriptconst [datosRegistro, setDatosRegistro] = useState({
  first_name: '',
  last_name: '',
  phone: '',
  email: '',
  password: '',
  confirmPassword: ''
});

Estructura: Objeto completo para creaci√≥n de usuario
Campos adicionales: Nombres, tel√©fono, confirmaci√≥n de contrase√±a


4. AN√ÅLISIS DE MANEJADORES DE EVENTOS
4.1 Manejadores de Cambio de Input
4.1.1 Login
javascriptconst manejarCambioLogin = (e: React.ChangeEvent<HTMLInputElement>) => {
  const { name, value } = e.target;
  setDatosLogin(prev => ({ ...prev, [name]: value }));
  setError(null);
};

Patr√≥n: Destructuring de event target
Actualizaci√≥n: Spread operator para inmutabilidad
Side effect: Limpia errores al escribir

4.1.2 Registro
javascriptconst manejarCambioRegistro = (e: React.ChangeEvent<HTMLInputElement>) => {
  const { name, value } = e.target;
  setDatosRegistro(prev => ({ ...prev, [name]: value }));
  setError(null);
};

Patr√≥n id√©ntico al login
Separaci√≥n de responsabilidades: Estados independientes


5. SISTEMA DE VALIDACIONES
5.1 Funci√≥n de Validaci√≥n de Registro
javascriptconst validarFormularioRegistro = () => {
  if (!datosRegistro.first_name.trim()) return 'El nombre es requerido';
  if (!datosRegistro.last_name.trim()) return 'El apellido es requerido';
  if (!datosRegistro.email.trim()) return 'El correo electr√≥nico es requerido';
  if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(datosRegistro.email)) 
    return 'Correo electr√≥nico inv√°lido';
  if (datosRegistro.password.length < 6) 
    return 'La contrase√±a debe tener al menos 6 caracteres';
  if (datosRegistro.password !== datosRegistro.confirmPassword) 
    return 'Las contrase√±as no coinciden';
  if (!datosRegistro.phone.trim()) 
    return 'El tel√©fono es requerido';
  if (!/^\d{10}$/.test(datosRegistro.phone)) 
    return 'El tel√©fono debe tener 10 d√≠gitos';
  return '';
};
Validaciones implementadas:

Campos requeridos: trim() elimina espacios
Email: Regex para formato v√°lido
Contrase√±a: M√≠nimo 6 caracteres
Confirmaci√≥n: Coincidencia exacta de contrase√±as
Tel√©fono: Exactamente 10 d√≠gitos num√©ricos
Retorno: String vac√≠o indica √©xito


6. L√ìGICA DE NAVEGACI√ìN POST-AUTENTICACI√ìN
6.1 Funci√≥n Helper para Pasos de Configuraci√≥n
javascriptconst getNextStepUrl = (currentStep: number) => {
  switch (currentStep) {
    case 1: return '/config-restaurante/informacion-general';
    case 2: return '/config-restaurante/ubicacion';
    case 3: return '/config-restaurante/horario-comercial';
    case 4: return '/config-restaurante/logo-portada';
    default: return '/config-restaurante';
  }
};

Prop√≥sito: Mapear n√∫meros de paso a URLs
Pasos definidos: 4 pasos de configuraci√≥n secuencial
Fallback: Redirige a configuraci√≥n base si paso inv√°lido

6.2 Verificaci√≥n de Estado del Restaurante
javascriptconst verificarConfiguracionRestaurante = async () => {
  try {
    const profile = await getUserProfile();
    const restaurant = await getUserRestaurant();
    
    if (!profile) {
      throw new Error('Error al obtener datos del usuario');
    }

    if (!restaurant) {
      console.log('‚ùå Usuario no tiene restaurante, redirigiendo a configuraci√≥n...');
      toast.success('¬°Bienvenido! Vamos a configurar tu restaurante.');
      router.push('/config-restaurante');
    } else {
      // L√≥gica de restaurante existente...
    }
  } catch (restaurantError) {
    console.error('‚ùå Error al verificar restaurante:', restaurantError);
    router.push('/config-restaurante');
  }
};
Flujos de decisi√≥n:

Sin perfil: Error y excepci√≥n
Sin restaurante: Ir a configuraci√≥n inicial
Con restaurante completo: Ir al dashboard
Configuraci√≥n incompleta: Continuar desde paso actual
Error: Fallback a configuraci√≥n


7. MANEJADORES DE AUTENTICACI√ìN
7.1 Manejador de Login
javascriptconst manejarLogin = async (e: React.FormEvent) => {
  e.preventDefault();
  setCargando(true);
  setError(null);

  try {
    console.log('üîê Intentando login con:', datosLogin.correo);
    await signInUser(datosLogin.correo, datosLogin.contrasena);
    toast.success('¬°Bienvenido!');
    await verificarConfiguracionRestaurante();
  } catch (err: any) {
    // Manejo de errores espec√≠ficos...
    setCargando(false);
  }
};
Manejo de errores espec√≠ficos:

Invalid login credentials: "Email o contrase√±a incorrectos"
Email not confirmed: "Debes confirmar tu email antes de iniciar sesi√≥n"
Too many requests: "Demasiados intentos. Intenta de nuevo en unos minutos"

7.2 Manejador de Registro
javascriptconst manejarRegistro = async (e: React.FormEvent) => {
  e.preventDefault();
  
  const validationError = validarFormularioRegistro();
  if (validationError) {
    setError(validationError);
    return;
  }

  setCargando(true);
  setError(null);

  try {
    const result = await signUpUser({
      email: datosRegistro.email,
      password: datosRegistro.password,
      first_name: datosRegistro.first_name,
      last_name: datosRegistro.last_name,
      phone: datosRegistro.phone
    });

    // Logs y redirecci√≥n...
    router.push('/config-restaurante');
  } catch (error: any) {
    // Manejo de errores...
  }
};
Flujo del registro:

Validaci√≥n previa: Cliente-side antes de env√≠o
Llamada a API: signUpUser con datos completos
Redirecci√≥n autom√°tica: Siempre a configuraci√≥n (usuarios nuevos)


8. AN√ÅLISIS DE LA INTERFAZ DE USUARIO
8.1 Estructura de Layout
javascript<div className="flex min-h-screen">
  {/* Columna izquierda - Informaci√≥n promocional */}
  <div className="hidden md:flex w-1/2 relative">
    {/* Imagen de fondo con overlay */}
  </div>
  
  {/* Columna derecha - Formulario */}
  <div className="w-full md:w-1/2 bg-white flex items-center justify-center p-8">
    {/* Contenido del formulario */}
  </div>
</div>
Caracter√≠sticas del dise√±o:

Responsive: Oculta columna izquierda en m√≥vil
Split layout: 50/50 en desktop
Imagen de fondo: Con filtros y overlay
Centrado: Formulario centrado vertical y horizontalmente

8.2 Contenido Promocional Din√°mico
8.2.1 T√≠tulos y Descripciones Condicionales
javascript<h1 className="text-4xl font-bold text-white mb-6">
  {modoRegistro 
    ? "√önete a la revoluci√≥n gastron√≥mica" 
    : "Conecta con m√°s clientes en tu zona"
  }
</h1>
8.2.2 Caracter√≠sticas Destacadas

Geolocalizaci√≥n: "Alcanza clientes en cualquier zona"
Sistema de Rese√±as: "Mejora tu servicio con feedback real"
Notificaciones: "Mant√©n informados a tus clientes"
Gesti√≥n de Domicilios: "Control total sobre entregas"

8.3 Formularios Condicionales
8.3.1 Formulario de Registro
Campos implementados:

Nombre y Apellido: Grid de 2 columnas
Email: Validaci√≥n HTML5 + custom
Tel√©fono: Prefijo +57, m√°x 10 d√≠gitos
Contrase√±a: Con toggle de visibilidad
Confirmar Contrase√±a: Validaci√≥n de coincidencia

8.3.2 Formulario de Login
Campos minimalistas:

Email: Input simple con placeholder
Contrase√±a: Con toggle de visibilidad
Recuperar contrase√±a: Placeholder (no implementado)


9. SISTEMA DE NOTIFICACIONES Y FEEDBACK
9.1 Implementaci√≥n de Toast
javascript<Toaster position="top-right" />

Posici√≥n: Esquina superior derecha
Tipos: Success, error, info
Duraci√≥n personalizable

9.2 Alertas de Error
javascript{error && (
  <div className="bg-red-50 border-l-4 border-red-500 p-4 rounded">
    <p className="text-red-700 text-sm">{error}</p>
  </div>
)}

Dise√±o: Border-left rojo con fondo suave
Condicional: Solo se muestra si hay error
Responsive: Se adapta al contenedor


10. FUNCIONES DE UTILIDAD Y HELPERS
10.1 Toggle de Modo
javascriptconst toggleModo = () => {
  setModoRegistro(!modoRegistro);
  setError(null);
  setDatosLogin({ correo: '', contrasena: '' });
  setDatosRegistro({
    first_name: '', last_name: '', phone: '',
    email: '', password: '', confirmPassword: ''
  });
  setMostrarContrasena(false);
  setMostrarConfirmPassword(false);
};
Limpieza completa:

Estado de modo: Alterna boolean
Errores: Resetea mensajes
Formularios: Limpia todos los campos
UI: Resetea visibilidad de contrase√±as


11. CARACTER√çSTICAS DE SEGURIDAD
11.1 Validaci√≥n de Entrada

Sanitizaci√≥n: trim() en todos los campos de texto
Longitud m√°xima: L√≠mites en inputs HTML
Patrones de validaci√≥n: Regex para email y tel√©fono

11.2 Manejo de Contrase√±as

No exposici√≥n: Estados separados para visibilidad
Validaci√≥n de fortaleza: M√≠nimo 6 caracteres
Confirmaci√≥n: Validaci√≥n de coincidencia


12. ASPECTOS DE EXPERIENCIA DE USUARIO
12.1 Estados de Carga
javascript{cargando ? (
  <div className="flex items-center">
    <Loader2 className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" />
    <span>Iniciando sesi√≥n...</span>
  </div>
) : (
  'Iniciar sesi√≥n'
)}
12.2 Feedback Inmediato

Limpieza de errores: Al escribir en inputs
Validaci√≥n previa: Antes de env√≠o
Mensajes contextuales: Espec√≠ficos por tipo de error


13. INTEGRACI√ìN CON SERVICIOS EXTERNOS
13.1 Google Sign-In (Placeholder)
javascript<button
  type="button"
  onClick={() => toast.error('Google Sign-In estar√° disponible pr√≥ximamente')}
  disabled={true}
  className="...cursor-not-allowed"
>

Estado: No implementado, preparado para futuro
UI: Bot√≥n deshabilitado con mensaje


14. CONCLUSIONES Y OBSERVACIONES
14.1 Fortalezas del M√≥dulo

Separaci√≥n clara entre login y registro
Validaci√≥n robusta del lado cliente
Manejo comprehensivo de errores
UX fluida con feedback inmediato
Dise√±o responsive y atractivo

14.2 √Åreas de Mejora Potencial

Validaci√≥n del servidor: Falta validaci√≥n backend expl√≠cita
Recuperaci√≥n de contrase√±a: No implementada
Google OAuth: Pendiente de implementaci√≥n
Testing: No hay evidencia de tests unitarios
Accesibilidad: Podr√≠a mejorarse con ARIA labels

14.3 Dependencias Cr√≠ticas

@spoon/shared: Todas las operaciones de autenticaci√≥n
next/navigation: Navegaci√≥n post-autenticaci√≥n
react-hot-toast: Sistema de notificaciones

Este m√≥dulo constituye la puerta de entrada principal a la aplicaci√≥n y maneja el flujo cr√≠tico de onboarding de restauranteros, incluyendo la l√≥gica de redirecci√≥n basada en el estado de configuraci√≥n del restaurante.