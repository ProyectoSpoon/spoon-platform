INFORME TÉCNICO DETALLADO — MÓDULO DE AUTENTICACIÓN

Rutas y archivos principales
- Página: apps/web/src/app/auth/page.tsx (Client Component)
- Hooks: apps/web/src/app/auth/useLogin.ts, useRegister.ts, usePasswordRecovery.ts
- Servicio compartido: packages/shared/lib/supabase.ts (Auth + perfiles + restaurantes)

Stack y dependencias clave
- Next.js App Router (client component con 'use client')
- React 18 + TypeScript
- Supabase JS (@supabase/supabase-js) via @spoon/shared/lib/supabase
- UI: Tailwind CSS, lucide-react (Eye / EyeOff)
- Notificaciones: react-hot-toast (toast)
- Form fields: @spoon/shared/patterns/FormFieldsV2 (EmailField, PasswordField, InputFieldV2)

Variables de entorno relevantes
- NEXT_PUBLIC_SUPABASE_URL, NEXT_PUBLIC_SUPABASE_ANON_KEY: credenciales cliente Supabase
- SUPABASE_SERVICE_ROLE_KEY: solo en server (cliente admin opcional)
- NEXT_PUBLIC_USE_NEW_UI=1: alterna entre inputs nuevos (FormFieldsV2) y legacy inputs

Contratos del servicio (packages/shared/lib/supabase.ts)
- getCurrentUser(): Promise<User | null>
  - Lee usuario de supabase.auth.getUser()
- getUserProfile(): Promise<User | null>
  - SELECT * FROM public.users WHERE id = auth.user.id (caché 30s, dedup)
- getUserRestaurant(): Promise<Restaurant | null>
  - SELECT * FROM public.restaurants WHERE owner_id = auth.user.id (caché 30s)
- signUpUser({ email, password, first_name, last_name, phone })
  - Crea auth.user (auth.signUp) y fila en public.users (role=restaurant_owner)
  - Retorna { user, profile }
- signInUser(email: string, password: string)
  - auth.signInWithPassword, y actualiza users.last_login = now()
- signOutUser(): cierra sesión
- supabase: cliente inicializado con persistencia de sesión (localStorage)

Tipos relevantes
- User: id, first_name, last_name, email, phone, role, restaurant_id, is_active, last_login, …
- Restaurant: id, owner_id, name, address, business_hours, logo_url, cover_image_url, setup_completed, setup_step, status, …

AuthPage (apps/web/src/app/auth/page.tsx)
- Estados de UI
  - modoRegistro: boolean — alterna entre “login” y “registro”
  - cargando: boolean — existe pero NO se cablea con los hooks (ver mejoras)
  - error: string | null — estado local; actualmente no se alimenta desde hooks (ver mejoras)
  - mostrarContrasena / mostrarConfirmPassword: booleans (para legacy inputs)
  - mostrarRecuperar: boolean — abre modal de “recuperar contraseña”
  - datosLogin: { correo, contrasena }
  - datosRegistro: { first_name, last_name, phone, email, password, confirmPassword }
  - useNewUI: derivado de NEXT_PUBLIC_USE_NEW_UI === '1' para conmutar los campos UI

- Hooks consumidos
  - const { login, loading: loginLoading, error: loginError } = useLogin()
    - Validación local: email válido, password >= 6; usa signInUser; toast success/error
  - const { register, loading: registerLoading, error: registerError } = useRegister()
    - Validación local de registro; usa signUpUser; toast success/error
  - const recovery = usePasswordRecovery()
    - resetPasswordForEmail(email, redirectTo=/auth/reset-password)

- Manejadores y helpers
  - manejarCambioLogin/Registro: setean estado y limpian error local
  - getNextStepUrl(step): mapea 1..4 a rutas de onboarding de configuración
  - verificarConfiguracionRestaurante: usa getUserProfile() y getUserRestaurant()
    - Sin restaurante: toast y push('/config-restaurante')
    - setup_completed: toast y push('/dashboard')
    - setup incompleto: toast con paso actual y push(nextStep)
    - catch: push('/config-restaurante')
  - manejarLogin(e): e.preventDefault(); llama login(correo, contrasena); si true → verificarConfiguracionRestaurante()
  - manejarRegistro(e): e.preventDefault(); llama register con datos mapeados; si hay user → setModoRegistro(false) y push('/config-restaurante')

Nota sobre mapeo de contraseñas en registro
- useRegister espera { ord, confirmord } (nombres internos del hook)
- AuthPage mapea password → ord y confirmPassword → confirmord al invocar register()
- Recomendado: unificar nombres a password/confirmPassword para consistencia

Password Recovery (usePasswordRecovery)
- Estado: { email, loading, error, success }
- handleSubmit: supabase.auth.resetPasswordForEmail(email, { redirectTo: `${origin}/auth/reset-password` })
- UI: modal dentro de AuthPage cuando mostrarRecuperar = true

UI y layout
- Diseño split: columna izquierda (promoción + logo) visible en md+; derecha: formulario
- Branding: /images/spoon-logo.jpg (aparece en ambas columnas)
- Formularios condicionados por useNewUI
  - Nuevo UI: EmailField, PasswordField, InputFieldV2
  - Legacy UI: inputs nativos + toggles de visibilidad con Eye/EyeOff
- Botones principales: “Crear cuenta” (registro), “Iniciar sesión” (login)
- Enlaces/acciones: toggle entre login/registro; botón “¿Olvidaste tu contraseña?” abre modal

Flujos principales
1) Login
   - Validación cliente (useLogin.validateLogin)
   - Autenticación (signInUser)
   - Toast de éxito → verificarConfiguracionRestaurante() → redirección según estado del restaurante
2) Registro
   - Validación cliente (useRegister.validateRegister)
   - Registro (signUpUser) + creación de perfil users
   - Toast de éxito → pasar a login (setModoRegistro(false)) → push('/config-restaurante')
3) Recuperar contraseña
   - En modal: email → resetPasswordForEmail → toast/alerta en modal

Validaciones en hooks
- useLogin: correo requerido + regex email, contraseña min 6
- useRegister: first/last_name requeridos, email regex, contraseña min 6, match confirmación, phone 10 dígitos

Observaciones y mejoras recomendadas
- Estados de carga/errores en AuthPage
  - Actualmente “cargando” del componente no se conecta a loginLoading/registerLoading; usar loading de hooks para deshabilitar botones y feedback visual
  - El estado local “error” no se llena con loginError/registerError; mostrar esos mensajes en el recuadro de error o eliminar el recuadro y confiar en toasts
- Nombres de campos en registro
  - Reemplazar ord/confirmord por password/confirmPassword en useRegister para consistencia y claridad
- Imports no usados
  - Link (next/link), Loader2 pueden eliminarse si no se usan en UI actual
- Ruta de reset password
  - Asegurar que /auth/reset-password exista y procese el cambio de contraseña (Supabase magic link). Si no existe, crear la página correspondiente
- Accesibilidad
  - Añadir aria-labels y descripciones a botones de visibilidad de contraseña y al modal
- Tests
  - Agregar pruebas unitarias para useLogin/useRegister (validaciones y ramas de error)

Contratos de entrada/salida (resumen)
- login(correo: string, contrasena: string) → Promise<boolean>
  - true si signInUser ok; en caso contrario retorna false y emite toast de error
- register(data: { first_name, last_name, phone, email, ord, confirmord }) → Promise<{ user, profile } | false>
  - Retorna objeto de Supabase en éxito; false en error/validación
- recovery.handleSubmit(event) → Promise<void>
  - Efecto: email de reseteo enviado por Supabase o error mostrado en modal

Rutas de redirección post-auth (orquestadas en verificarConfiguracionRestaurante)
- Sin restaurante → /config-restaurante
- setup_completed = true → /dashboard
- setup_step = 1..4 → /config-restaurante/(informacion-general|ubicacion|horario-comercial|logo-portada)

Edge cases previstos
- Usuario sin sesión tras login (fallo de supabase): se muestran errores con toast y retorna false
- Email no validado: Supabase puede retornar error; manejado con toast genérico
- Condición de carrera en fetch de perfil/restaurante: funciones usan caché y deduplicación para evitar múltiples llamadas simultáneas

Checklist de verificación rápida
- Variables de entorno cargadas (NEXT_PUBLIC_SUPABASE_URL/ANON_KEY)
- Página /auth operativa con toggle login/registro y modal de recuperación
- Redirecciones tras login coherentes con estado del restaurante
- Toasts visibles y no duplicados (evitar duplicar toasts en página y hooks)

Resumen
El módulo de autenticación consta de una página única que orquesta login, registro y recuperación de contraseña mediante hooks dedicados. La capa de servicio centraliza las operaciones con Supabase (auth + tablas públicas) e incluye utilidades de caché para perfil/restaurante. La UX emplea un layout bi-columnar, componentes de formulario reutilizables y toasts para feedback. Se recomiendan pequeños ajustes para alinear estados de carga/errores entre página y hooks, unificar nombres de campos y asegurar la ruta de restablecimiento de contraseña.

## Mapa técnico detallado (por archivo)

### apps/web/src/app/auth/page.tsx — AuthPage
- Componentes/UI usados: Eye, EyeOff (lucide-react), EmailField, PasswordField, InputFieldV2 (@spoon/shared/patterns), toast (react-hot-toast)
- Dependencias: useRouter (next/navigation), getUserProfile, getUserRestaurant (@spoon/shared/lib/supabase), useLogin, useRegister, usePasswordRecovery (local)
- Variables de estado:
  - useNewUI: boolean (NEXT_PUBLIC_USE_NEW_UI === '1')
  - modoRegistro: boolean
  - cargando: boolean (actualmente no cableado a hooks)
  - error: string | null (actualmente no cableado a hooks)
  - mostrarContrasena: boolean
  - mostrarConfirmPassword: boolean
  - mostrarRecuperar: boolean
  - datosLogin: { correo: string; contrasena: string }
  - datosRegistro: { first_name: string; last_name: string; phone: string; email: string; password: string; confirmPassword: string }
  - recovery: retorna { email, loading, error, success, handleChange, handleSubmit }
- Funciones:
  - manejarCambioLogin(e): setDatosLogin + limpia error
  - manejarCambioRegistro(e): setDatosRegistro + limpia error
  - getNextStepUrl(step: 1|2|3|4): string — mapea a rutas de onboarding
  - verificarConfiguracionRestaurante(): usa getUserProfile() y getUserRestaurant(); decide push a /config-restaurante, /dashboard o al paso correspondiente
  - manejarLogin(e): previene default, llama login(correo, contrasena) del hook; si true → verificarConfiguracionRestaurante()
  - manejarRegistro(e): previene default, llama register({ first_name, last_name, phone, email, ord: password, confirmord: confirmPassword }); si result.user → setModoRegistro(false) y push('/config-restaurante')
  - toggleModo(): alterna login/registro
- Rutas involucradas:
  - /config-restaurante, /dashboard
  - /config-restaurante/(informacion-general|ubicacion|horario-comercial|logo-portada)
  - /auth/reset-password (en redirectTo del recovery)
- Servicios usados y dónde:
  - getUserProfile/getUserRestaurant: dentro de verificarConfiguracionRestaurante
  - useLogin → signInUser: al enviar login
  - useRegister → signUpUser: al enviar registro
  - usePasswordRecovery → supabase.auth.resetPasswordForEmail
- Observaciones:
  - Link (next/link) y Loader2 están importados pero no utilizados en la UI actual

### apps/web/src/app/auth/useLogin.ts — Hook de login
- Exporta: useLogin(): { login(correo: string, contrasena: string): Promise<boolean>; loading: boolean; error: string | null }
- Estado interno: loading, error
- Helpers: validateLogin(correo, contrasena): string | null (email regex y longitud de password)
- Servicios usados: signInUser(correo.trim(), contrasena) de @spoon/shared/lib/supabase
- Comportamiento: emite toast de éxito/fracaso; retorna true/false según resultado

### apps/web/src/app/auth/useRegister.ts — Hook de registro
- Tipos: interface RegisterData { first_name, last_name, phone, email, ord, confirmord }
- Exporta: useRegister(): { register(data: RegisterData): Promise<{ user: any; profile: any } | false>; loading: boolean; error: string | null }
- Estado interno: loading, error
- Helpers: validateRegister(data): string | null (nombres requeridos, email regex, ord min 6, match con confirmord, phone 10 dígitos)
- Servicios usados: signUpUser({ email, password: data.ord, first_name, last_name, phone })
- Observación: nombres de campos ord/confirmord difieren de password/confirmPassword en la página → se recomienda unificar

### apps/web/src/app/auth/usePasswordRecovery.ts — Hook de recuperación
- Estado: email, loading, error, success
- Métodos: handleChange(e), handleSubmit(e)
- Servicio: supabase.auth.resetPasswordForEmail(email, { redirectTo: `${origin}/auth/reset-password` })
- Integración UI: modal controlado por mostrarRecuperar en AuthPage

### packages/shared/lib/supabase.ts — Contratos de auth relevantes
- supabase: cliente con persistencia de sesión en localStorage
- signUpUser({ email, password, first_name, last_name, phone }): crea auth user y fila en public.users (role=restaurant_owner)
- signInUser(email, password): inicia sesión y actualiza users.last_login = now()
- signOutUser(): cierra sesión
- getUserProfile(): SELECT * FROM public.users WHERE id = auth.user.id (caché 30s)
- getUserRestaurant(): SELECT * FROM public.restaurants WHERE owner_id = auth.user.id (caché 30s)
- Tablas tocadas: public.users, public.restaurants

## Gaps y mejoras (resumen)
- Ruta /auth/reset-password: no existe actualmente en el repo → crear página que procese el cambio de contraseña desde el magic link de Supabase
- Unificar nombres de contraseña en registro: reemplazar ord/confirmord por password/confirmPassword en useRegister y consumidores
- Cablear estados de carga/errores: usar loginLoading/registerLoading y loginError/registerError en AuthPage; o eliminar estados locales redundantes
- Limpieza de imports: remover Link y Loader2 si no se utilizan
- Tests: agregar unit tests para useLogin y useRegister (validaciones y ramas de error)